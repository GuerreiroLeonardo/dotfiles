# A Powerline-inspired theme for ZSH
#
# Shows contextual-information only when relevant.

# NOTES
#  Design of this prompt is modular.
#  It is split across multiple "prompt-*.shrc" files. It allows separating the
#  looks of the prompt from the logic and code for displaying it.
#  Basically, it makes this themable and extensible!!
#
#  :: prompt.shrc
#  -> Enables the prompt.
#
#  :: prompt-segments.shrc
#  -> Defines the order of prompt segments and implements functions to show the
#     same.
#
#  :: prompt-theme-*.shrc
#  -> Defines colors used by prompt-color-function.*shrc when displaying the
#     prompt.
#
#  :: prompt-color-functions.*shrc
#  -> Shell-specific drawing functions. This is what handles the shell-specific
#     details.

# Prompt variables
#   The values of these arrays is defined in prompt-config.shrc in this
#   directory.
declare -A _PROMPT_SYMBOLS
declare -A _PROMPT_TEXT_COLOR
declare -A _PROMPT_SEGMENT_COLOR

#------------------------------------------------------------------------------
# Prompt
#------------------------------------------------------------------------------
_prompt_show_prompt_for_input() {
    # Just show the indicator, for input.
    _prompt_end_segment prompt $1
    _prompt_write " "
}

#------------------------------------------------------------------------------
# Final entry point
#------------------------------------------------------------------------------
function _prompt_print() {
    last_failed=$?
    previous_segment=none
    for segment_name in ${_PROMPT_SEGMENT_ORDER}; do
        segment_text=$(_prompt_segment_${segment_name})
        if [[ -n $segment_text ]]; then
            _prompt_start_new_segment $previous_segment $segment_name "$segment_text"
            previous_segment=$segment_name
        fi
    done
    _prompt_end_segment $previous_segment

    _prompt_write "\n"
    _prompt_show_prompt_for_input ${last_failed}
}

export PS1='$(_prompt_print)'
